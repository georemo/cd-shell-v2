
INTRODUCTION:
Use nazox theme to create module federated projects.
Two project will be created cd-shell and cd-user based on nazox starter kit.
cd-shell will be configured to load cd-user on navigation request.
Nazox Ref: https://themeforest.net/item/nazox-angular-10-admin-dashboard-template/28441799?utm_campaign=item_update&utm_content=item_update&utm_keyword=sysemail&utm_medium=email&utm_source=System+Email&utm_term=sysemail


NB:
  - the following refers to procedure for nazox for angulr 15. 
  - If already setup, you can skip to "RUNNING EXISTING MODULES"
1. Preliminary confirmations:
  - confirm that the database is up and reachable
  - confirm that cd-api is up and running and reachable
2. seup nazox project with starter kit:
  - test to confirm starter kit is in working state
3. create new 'app' in the project:
  - Ref: https://www.tektutorialshub.com/angular/angular-multiple-apps-in-one-project/
  - ng generate application cd-shell
4. replace src folder, them modify the angular.json file:
  - replace the ./projects/cd-shell/src folder with the working 'src' of starter kit
  - adjust the angular.json file for cd-shell project in terms of assets and styles
5. Test working project/cd-shell:
  - run: ng serve cd-shell
  - when confirmed working, replace npm script/start with ng serve cd-shell. 
  - Now 'npm start' with start the cd-shell project

6. Install module federation plugin:
  ref:
  - https://www.npmjs.com/package/@angular-architects/module-federation
  run: ng add @angular-architects/module-federation --project cd-shell --port 4500 --type host
  notes:
  - note the project name, port and type
  - this cannot work if cd-shell project has not been created
7. Add route:
  - Add the route below to app-route.module.ts
  {
    path: 'user',
    component: LayoutComponent,
    loadChildren: () => import('user/PagesModule').then(m => m.PagesModule)
  }
  - note that if 'component LayoutComponent,' allows the page to be nested otherwise, the page is loaded as stand alone. 
  
8. Handle compiler issue:
  - The path 'user/PagesModule' which is imported here, does not exist within the shell. It's just a virtual path pointing to another project. 
  - To ease the TypeScript compiler, we need a typing for it
  Create decl.d.ts in the root of 'src':
  - contents: declare module 'user/PagesModule';
9. On the webpack config add:
  remotes: {
    "user": "https://cd-shell.asdap.africa:4407/remoteEntry.js",    
  },

REMOTE APP(cd-user):
10. repeat 1-5 above for cd-user:
- in no.2 run: 'ng generate application cd-user'
- in no.5 run: 'ng add @angular-architects/module-federation --project cd-user --port 4407 --type remote'


11. Set remote exposure:
  - in the webpack config set:
  exposes: {
    './Component': './projects/cd-user/src/app/app.component.ts',
    './PagesModule': './projects/cd-user/src/app/pages/pages.module.ts',
  },



-----------------------------------------------------
MODIFICATION FOR DYNAMIC FEDERATION:
-----------------------------------------------------
share selected modules:
- comment all in webconfig then replace shareAll with:
const { share, withModuleFederationPlugin } = require('@angular-architects/module-federation/webpack');
module.exports = withModuleFederationPlugin({

  // Explicitly share packages:
  shared: share({
      "@angular/core": { singleton: true, strictVersion: true, requiredVersion: 'auto' }, 
      "@angular/common": { singleton: true, strictVersion: true, requiredVersion: 'auto' }, 
      "@angular/common/http": { singleton: true, strictVersion: true, requiredVersion: 'auto' },                     
      "@angular/router": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
  }),

});


1. Since version 1.2, we provide helper functions making dynamic module federation really easy. 
Just use our loadRemoteModule function instead of a dynamic include, e. g. together with lazy routes
In the shell app.routes:

import { loadRemoteModule } from '@angular-architects/module-federation';

2. comment on earlier route to 'user' and replace as below:
  // {
  //   path: 'user',
  //   component: LayoutComponent,
  //   loadChildren: () => import('user/PagesModule').then(m => m.PagesModule)
  // },
  {
    path: 'user',
    component: LayoutComponent,
    loadChildren: () =>
        loadRemoteModule({
            type: 'module',
            remoteEntry: 'https://cd-shell.asdap.africa:4407/remoteEntry.js',
            exposedModule: './PagesModule'
        })
        .then(m => m.PagesModule)
  },

2. MANIFEST FILE:
https://www.angulararchitects.io/en/blog/dynamic-module-federation-with-angular/

on main.ts add:
import { loadManifest } from '@angular-architects/module-federation';

 loadManifest("/assets/mf.manifest.json")
   .catch(err => console.error(err))
   .then(_ => import('./bootstrap'))
   .catch(err => console.error(err));



2. Optional Improvements:
If somehow possible, load the remoteEntry upfront. This allows Module Federation to take the remote's metadata in 
consideration when negotiating the versions of the shared libraries.
For this, you could call loadRemoteEntry BEFORE bootstrapping Angular


// main.ts
import { loadRemoteEntry } from '@angular-architects/module-federation';

Promise.all([
  loadRemoteEntry({
    type: 'module',
    remoteEntry: 'https://cd-shell.asdap.africa:3000/remoteEntry.js',
  }),
])
  .catch((err) => console.error('Error loading remote entries', err))
  .then(() => import('./bootstrap'))
  .catch((err) => console.error(err));

LOADING ROUTES FROM DB:
https://stackoverflow.com/questions/66711805/dynamically-modifying-lazy-loaded-routes-not-working



-------------------------------------------------------------------------------------------------
RUNNING EXISTING MODULES:
-------------------------------------------------------------------------------------------------

Establish ssh with backend container hosts:

  check if key exists:
  - ls -la ~/.ssh/
  create key pair:
  - ssh-keygen -t rsa -b 2048 -f $HOME/.ssh/id_rsa -q -N ""
  copy key to remote machine:
  - ssh-copy-id -i $HOME/.ssh/id_rsa.pub emp-07@emp-07
  ssh connection:
  - ssh emp-07@emp-07

check db:
  ssh to db container host:
  - ssh emp-07@emp-07
  restart db container:
  - lxc stop cd-db-91
  - lxc start cd-db-91
  telnet:
  - telnet cd-db-91

check cd-api:
  ssh to cdapi container host:
  - ssh emp-07@emp-07
  restart cd-api container:
  - cd ansible-testbed/lxd-deploy/routed-container/
  - sh cd-api-start.sh
  test with json login request:
  - curl -k -X POST -H 'Content-Type: application/json' -d '{ "ctx": "Sys", "m": "User", "c": "User", "a": "Login", "dat": { "f_vals": [ { "data": { "userName": "karl", "password": "secret", "consumerGuid": "B0B3DA99-1859-A499-90F6-1E3F69575DCD" } } ], "token": null }, "args": null }' https://cd-shell.asdap.africa:3001 -v

test front end from development source:
  - adjust configuration based on target backend
  - 

build and test distribution:









